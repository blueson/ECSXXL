//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class FightEntity {

    static readonly SearchEnemy searchEnemyComponent = new SearchEnemy();

    public bool isSearchEnemy {
        get { return HasComponent(FightComponentsLookup.SearchEnemy); }
        set {
            if (value != isSearchEnemy) {
                var index = FightComponentsLookup.SearchEnemy;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : searchEnemyComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class FightMatcher {

    static Entitas.IMatcher<FightEntity> _matcherSearchEnemy;

    public static Entitas.IMatcher<FightEntity> SearchEnemy {
        get {
            if (_matcherSearchEnemy == null) {
                var matcher = (Entitas.Matcher<FightEntity>)Entitas.Matcher<FightEntity>.AllOf(FightComponentsLookup.SearchEnemy);
                matcher.componentNames = FightComponentsLookup.componentNames;
                _matcherSearchEnemy = matcher;
            }

            return _matcherSearchEnemy;
        }
    }
}
