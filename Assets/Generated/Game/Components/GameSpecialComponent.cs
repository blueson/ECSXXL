//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Special special { get { return (Special)GetComponent(GameComponentsLookup.Special); } }
    public bool hasSpecial { get { return HasComponent(GameComponentsLookup.Special); } }

    public void AddSpecial(string newSpecialName) {
        var index = GameComponentsLookup.Special;
        var component = (Special)CreateComponent(index, typeof(Special));
        component.specialName = newSpecialName;
        AddComponent(index, component);
    }

    public void ReplaceSpecial(string newSpecialName) {
        var index = GameComponentsLookup.Special;
        var component = (Special)CreateComponent(index, typeof(Special));
        component.specialName = newSpecialName;
        ReplaceComponent(index, component);
    }

    public void RemoveSpecial() {
        RemoveComponent(GameComponentsLookup.Special);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSpecial;

    public static Entitas.IMatcher<GameEntity> Special {
        get {
            if (_matcherSpecial == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Special);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSpecial = matcher;
            }

            return _matcherSpecial;
        }
    }
}
